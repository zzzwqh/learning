apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appname }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  
  selector:
    matchLabels:
      app: {{ .Values.appname }}
  template:
    metadata:
      labels:
        app: {{ .Values.appname }}
      annotations:
        prometheus.io/scrape: "true"        
    spec:  
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Values.appname }}
                topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2                 
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }} 
      initContainers:
      - name: setsysctl
        image: busybox
        securityContext:
          privileged: true
        command:
        - sh
        - -c
        - |
          sysctl -w net.core.somaxconn=65535
          sysctl -w net.ipv4.tcp_tw_reuse=1
          sysctl -w fs.file-max=1048576          
      containers:                               
      - name: {{ .Values.appname }}
        {{- if eq .Values.namespace "prod" }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.prod_tag }}"
        {{- else }}        
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- end }}  
        imagePullPolicy: {{ .Values.image.pullPolicy }}     
        resources:
          {{- if and (not .Values.resources.limits.memory) (.Values.resources.limits.cpu) }}
          limits:
            cpu: {{ .Values.resources.limits.cpu | quote }}
          {{- else if and (.Values.resources.limits.memory) (not .Values.resources.limits.cpu) }}
          limits:
            memory: {{ .Values.resources.limits.memory | quote }}
          {{- else if and (.Values.resources.limits.cpu) (.Values.resources.limits.memory) }}
          limits:
            cpu: {{ .Values.resources.limits.cpu | quote }}
            memory: {{ .Values.resources.limits.memory | quote }}                 
          {{- end }}    
          requests:
            memory: {{ .Values.resources.requests.memory | quote }}
            cpu: {{ .Values.resources.requests.cpu | quote }} 
        ports:
        - containerPort: {{ .Values.service.port }}
        lifecycle:
          preStop:
            exec:
              command: ["/usr/local/nginx/sbin/nginx","-s","quit;"] 
        readinessProbe:
          tcpSocket:
          failureThreshold: 10
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: 30
          timeoutSeconds: 3                      
        livenessProbe:
          tcpSocket:
          failureThreshold: 10
          tcpSocket:
            port: {{ .Values.service.port }}
          initialDelaySeconds: 30
          timeoutSeconds: 3    
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appname }} 
spec:
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      name: web
  selector:
    app: {{ .Values.appname }}           
