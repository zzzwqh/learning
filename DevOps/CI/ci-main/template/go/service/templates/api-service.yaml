apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appname }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ .Values.appname }}
  template:
    metadata:
      labels:
        app: {{ .Values.appname }} 
    spec:
      terminationGracePeriodSeconds: 90         
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ .Values.appname }}
                topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 2                
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      containers:
      - name: {{ .Values.appname }}
        {{- if eq .Values.namespace "prod" }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.prod_tag }}"
        {{- else }}        
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- end }}        
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - '-c'
              - sleep 60               
        resources:
          {{- if and (not .Values.resources.limits.memory) (.Values.resources.limits.cpu) }}
          limits:
            cpu: {{ .Values.resources.limits.cpu | quote }}
          {{- else if and (.Values.resources.limits.memory) (not .Values.resources.limits.cpu) }}
          limits:
            memory: {{ .Values.resources.limits.memory | quote }}
          {{- else if and (.Values.resources.limits.cpu) (.Values.resources.limits.memory) }}
          limits:
            cpu: {{ .Values.resources.limits.cpu | quote }}
            memory: {{ .Values.resources.limits.memory | quote }}                 
          {{- end }}    
          requests:
            memory: {{ .Values.resources.requests.memory | quote }}
            cpu: {{ .Values.resources.requests.cpu | quote }}        
        ports:
        - containerPort: {{ .Values.service.port }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            port: {{ .Values.service.port }}
            path: /healthz
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3     
        readinessProbe: 
          failureThreshold: 10
          httpGet:
            port: {{ .Values.service.port }}
            path: /healthz
          initialDelaySeconds: 30
          periodSeconds: 5 
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appname }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.appname }} 
spec:
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      name: api
  selector:
    app: {{ .Values.appname }}
